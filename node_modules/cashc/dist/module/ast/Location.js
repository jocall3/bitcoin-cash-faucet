export class Location {
    constructor(start, end) {
        this.start = start;
        this.end = end;
    }
    static fromCtx(ctx) {
        var _a, _b;
        const stop = ((_a = ctx.stop) === null || _a === void 0 ? void 0 : _a.text) ? ctx.stop : ctx.start;
        const textLength = ((_b = stop.text) !== null && _b !== void 0 ? _b : '').length;
        const start = new Point(ctx.start.line, ctx.start.charPositionInLine);
        const end = new Point(stop.line, stop.charPositionInLine + textLength);
        return new Location(start, end);
    }
    static fromToken(token) {
        var _a;
        const textLength = ((_a = token.text) !== null && _a !== void 0 ? _a : '').length;
        const start = new Point(token.line, token.charPositionInLine);
        const end = new Point(token.line, token.charPositionInLine + textLength);
        return new Location(start, end);
    }
    text(code) {
        return code.slice(this.start.offset(code), this.end.offset(code));
    }
}
export class Point {
    constructor(line, column) {
        this.line = line;
        this.column = column;
    }
    offset(code) {
        const lines = code.split('\n');
        const newLines = this.line - 1;
        const lineOffset = lines.slice(0, newLines).reduce((acc, curr) => acc + curr.length, 0);
        return lineOffset + newLines + this.column;
    }
    toString() {
        return `Line ${this.line}, Column ${this.column}`;
    }
}
//# sourceMappingURL=Location.js.map