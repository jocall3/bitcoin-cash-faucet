// Generated from src/grammar/CashScript.g4 by ANTLR 4.9.0-SNAPSHOT
import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { Token } from "antlr4ts/Token";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";
import * as Utils from "antlr4ts/misc/Utils";
export class CashScriptParser extends Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator(CashScriptParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return CashScriptParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "CashScript.g4"; }
    // @Override
    get ruleNames() { return CashScriptParser.ruleNames; }
    // @Override
    get serializedATN() { return CashScriptParser._serializedATN; }
    createFailedPredicateException(predicate, message) {
        return new FailedPredicateException(this, predicate, message);
    }
    // @RuleVersion(0)
    sourceFile() {
        let _localctx = new SourceFileContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, CashScriptParser.RULE_sourceFile);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 53;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__0) {
                    {
                        {
                            this.state = 50;
                            this.pragmaDirective();
                        }
                    }
                    this.state = 55;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 56;
                this.contractDefinition();
                this.state = 57;
                this.match(CashScriptParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    pragmaDirective() {
        let _localctx = new PragmaDirectiveContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, CashScriptParser.RULE_pragmaDirective);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 59;
                this.match(CashScriptParser.T__0);
                this.state = 60;
                this.pragmaName();
                this.state = 61;
                this.pragmaValue();
                this.state = 62;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    pragmaName() {
        let _localctx = new PragmaNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, CashScriptParser.RULE_pragmaName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 64;
                this.match(CashScriptParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    pragmaValue() {
        let _localctx = new PragmaValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, CashScriptParser.RULE_pragmaValue);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 66;
                this.versionConstraint();
                this.state = 68;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__3) | (1 << CashScriptParser.T__4) | (1 << CashScriptParser.T__5) | (1 << CashScriptParser.T__6) | (1 << CashScriptParser.T__7) | (1 << CashScriptParser.T__8) | (1 << CashScriptParser.T__9))) !== 0) || _la === CashScriptParser.VersionLiteral) {
                    {
                        this.state = 67;
                        this.versionConstraint();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    versionConstraint() {
        let _localctx = new VersionConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, CashScriptParser.RULE_versionConstraint);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 71;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__3) | (1 << CashScriptParser.T__4) | (1 << CashScriptParser.T__5) | (1 << CashScriptParser.T__6) | (1 << CashScriptParser.T__7) | (1 << CashScriptParser.T__8) | (1 << CashScriptParser.T__9))) !== 0)) {
                    {
                        this.state = 70;
                        this.versionOperator();
                    }
                }
                this.state = 73;
                this.match(CashScriptParser.VersionLiteral);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    versionOperator() {
        let _localctx = new VersionOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, CashScriptParser.RULE_versionOperator);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 75;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__3) | (1 << CashScriptParser.T__4) | (1 << CashScriptParser.T__5) | (1 << CashScriptParser.T__6) | (1 << CashScriptParser.T__7) | (1 << CashScriptParser.T__8) | (1 << CashScriptParser.T__9))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    contractDefinition() {
        let _localctx = new ContractDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, CashScriptParser.RULE_contractDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 77;
                this.match(CashScriptParser.T__10);
                this.state = 78;
                this.match(CashScriptParser.Identifier);
                this.state = 79;
                this.parameterList();
                this.state = 80;
                this.match(CashScriptParser.T__11);
                this.state = 84;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__13) {
                    {
                        {
                            this.state = 81;
                            this.functionDefinition();
                        }
                    }
                    this.state = 86;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 87;
                this.match(CashScriptParser.T__12);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionDefinition() {
        let _localctx = new FunctionDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, CashScriptParser.RULE_functionDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 89;
                this.match(CashScriptParser.T__13);
                this.state = 90;
                this.match(CashScriptParser.Identifier);
                this.state = 91;
                this.parameterList();
                this.state = 92;
                this.match(CashScriptParser.T__11);
                this.state = 96;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === CashScriptParser.T__17 || _la === CashScriptParser.T__18 || ((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (CashScriptParser.T__47 - 48)) | (1 << (CashScriptParser.T__48 - 48)) | (1 << (CashScriptParser.T__49 - 48)) | (1 << (CashScriptParser.T__50 - 48)) | (1 << (CashScriptParser.T__51 - 48)) | (1 << (CashScriptParser.T__52 - 48)) | (1 << (CashScriptParser.Bytes - 48)) | (1 << (CashScriptParser.Identifier - 48)))) !== 0)) {
                    {
                        {
                            this.state = 93;
                            this.statement();
                        }
                    }
                    this.state = 98;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 99;
                this.match(CashScriptParser.T__12);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    parameterList() {
        let _localctx = new ParameterListContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, CashScriptParser.RULE_parameterList);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 101;
                this.match(CashScriptParser.T__14);
                this.state = 113;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (CashScriptParser.T__47 - 48)) | (1 << (CashScriptParser.T__48 - 48)) | (1 << (CashScriptParser.T__49 - 48)) | (1 << (CashScriptParser.T__50 - 48)) | (1 << (CashScriptParser.T__51 - 48)) | (1 << (CashScriptParser.T__52 - 48)) | (1 << (CashScriptParser.Bytes - 48)))) !== 0)) {
                    {
                        this.state = 102;
                        this.parameter();
                        this.state = 107;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 103;
                                        this.match(CashScriptParser.T__15);
                                        this.state = 104;
                                        this.parameter();
                                    }
                                }
                            }
                            this.state = 109;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
                        }
                        this.state = 111;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === CashScriptParser.T__15) {
                            {
                                this.state = 110;
                                this.match(CashScriptParser.T__15);
                            }
                        }
                    }
                }
                this.state = 115;
                this.match(CashScriptParser.T__16);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    parameter() {
        let _localctx = new ParameterContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, CashScriptParser.RULE_parameter);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 117;
                this.typeName();
                this.state = 118;
                this.match(CashScriptParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    block() {
        let _localctx = new BlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, CashScriptParser.RULE_block);
        let _la;
        try {
            this.state = 129;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case CashScriptParser.T__11:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 120;
                        this.match(CashScriptParser.T__11);
                        this.state = 124;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === CashScriptParser.T__17 || _la === CashScriptParser.T__18 || ((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (CashScriptParser.T__47 - 48)) | (1 << (CashScriptParser.T__48 - 48)) | (1 << (CashScriptParser.T__49 - 48)) | (1 << (CashScriptParser.T__50 - 48)) | (1 << (CashScriptParser.T__51 - 48)) | (1 << (CashScriptParser.T__52 - 48)) | (1 << (CashScriptParser.Bytes - 48)) | (1 << (CashScriptParser.Identifier - 48)))) !== 0)) {
                            {
                                {
                                    this.state = 121;
                                    this.statement();
                                }
                            }
                            this.state = 126;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 127;
                        this.match(CashScriptParser.T__12);
                    }
                    break;
                case CashScriptParser.T__17:
                case CashScriptParser.T__18:
                case CashScriptParser.T__47:
                case CashScriptParser.T__48:
                case CashScriptParser.T__49:
                case CashScriptParser.T__50:
                case CashScriptParser.T__51:
                case CashScriptParser.T__52:
                case CashScriptParser.Bytes:
                case CashScriptParser.Identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 128;
                        this.statement();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    statement() {
        let _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, CashScriptParser.RULE_statement);
        try {
            this.state = 137;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 10, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 131;
                        this.variableDefinition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 132;
                        this.tupleAssignment();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 133;
                        this.assignStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 134;
                        this.timeOpStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 135;
                        this.requireStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 136;
                        this.ifStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    variableDefinition() {
        let _localctx = new VariableDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, CashScriptParser.RULE_variableDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 139;
                this.typeName();
                this.state = 141;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === CashScriptParser.T__46) {
                    {
                        this.state = 140;
                        this.modifier();
                    }
                }
                this.state = 143;
                this.match(CashScriptParser.Identifier);
                this.state = 144;
                this.match(CashScriptParser.T__9);
                this.state = 145;
                this.expression(0);
                this.state = 146;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tupleAssignment() {
        let _localctx = new TupleAssignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, CashScriptParser.RULE_tupleAssignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 148;
                this.typeName();
                this.state = 149;
                this.match(CashScriptParser.Identifier);
                this.state = 150;
                this.match(CashScriptParser.T__15);
                this.state = 151;
                this.typeName();
                this.state = 152;
                this.match(CashScriptParser.Identifier);
                this.state = 153;
                this.match(CashScriptParser.T__9);
                this.state = 154;
                this.expression(0);
                this.state = 155;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    assignStatement() {
        let _localctx = new AssignStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, CashScriptParser.RULE_assignStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 157;
                this.match(CashScriptParser.Identifier);
                this.state = 158;
                this.match(CashScriptParser.T__9);
                this.state = 159;
                this.expression(0);
                this.state = 160;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    timeOpStatement() {
        let _localctx = new TimeOpStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, CashScriptParser.RULE_timeOpStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 162;
                this.match(CashScriptParser.T__17);
                this.state = 163;
                this.match(CashScriptParser.T__14);
                this.state = 164;
                this.match(CashScriptParser.TxVar);
                this.state = 165;
                this.match(CashScriptParser.T__5);
                this.state = 166;
                this.expression(0);
                this.state = 167;
                this.match(CashScriptParser.T__16);
                this.state = 168;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    requireStatement() {
        let _localctx = new RequireStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, CashScriptParser.RULE_requireStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 170;
                this.match(CashScriptParser.T__17);
                this.state = 171;
                this.match(CashScriptParser.T__14);
                this.state = 172;
                this.expression(0);
                this.state = 173;
                this.match(CashScriptParser.T__16);
                this.state = 174;
                this.match(CashScriptParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifStatement() {
        let _localctx = new IfStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, CashScriptParser.RULE_ifStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 176;
                this.match(CashScriptParser.T__18);
                this.state = 177;
                this.match(CashScriptParser.T__14);
                this.state = 178;
                this.expression(0);
                this.state = 179;
                this.match(CashScriptParser.T__16);
                this.state = 180;
                _localctx._ifBlock = this.block();
                this.state = 183;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 12, this._ctx)) {
                    case 1:
                        {
                            this.state = 181;
                            this.match(CashScriptParser.T__19);
                            this.state = 182;
                            _localctx._elseBlock = this.block();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionCall() {
        let _localctx = new FunctionCallContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, CashScriptParser.RULE_functionCall);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 185;
                this.match(CashScriptParser.Identifier);
                this.state = 186;
                this.expressionList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expressionList() {
        let _localctx = new ExpressionListContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, CashScriptParser.RULE_expressionList);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 188;
                this.match(CashScriptParser.T__14);
                this.state = 200;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__14) | (1 << CashScriptParser.T__20) | (1 << CashScriptParser.T__21) | (1 << CashScriptParser.T__23) | (1 << CashScriptParser.T__26))) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (CashScriptParser.T__34 - 35)) | (1 << (CashScriptParser.T__35 - 35)) | (1 << (CashScriptParser.T__47 - 35)) | (1 << (CashScriptParser.T__48 - 35)) | (1 << (CashScriptParser.T__49 - 35)) | (1 << (CashScriptParser.T__50 - 35)) | (1 << (CashScriptParser.T__51 - 35)) | (1 << (CashScriptParser.T__52 - 35)) | (1 << (CashScriptParser.BooleanLiteral - 35)) | (1 << (CashScriptParser.NumberLiteral - 35)) | (1 << (CashScriptParser.Bytes - 35)) | (1 << (CashScriptParser.StringLiteral - 35)) | (1 << (CashScriptParser.DateLiteral - 35)) | (1 << (CashScriptParser.HexLiteral - 35)) | (1 << (CashScriptParser.NullaryOp - 35)) | (1 << (CashScriptParser.Identifier - 35)))) !== 0)) {
                    {
                        this.state = 189;
                        this.expression(0);
                        this.state = 194;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 190;
                                        this.match(CashScriptParser.T__15);
                                        this.state = 191;
                                        this.expression(0);
                                    }
                                }
                            }
                            this.state = 196;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
                        }
                        this.state = 198;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === CashScriptParser.T__15) {
                            {
                                this.state = 197;
                                this.match(CashScriptParser.T__15);
                            }
                        }
                    }
                }
                this.state = 202;
                this.match(CashScriptParser.T__16);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new ExpressionContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 40;
        this.enterRecursionRule(_localctx, 40, CashScriptParser.RULE_expression, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 257;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 21, this._ctx)) {
                    case 1:
                        {
                            _localctx = new ParenthesisedContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 205;
                            this.match(CashScriptParser.T__14);
                            this.state = 206;
                            this.expression(0);
                            this.state = 207;
                            this.match(CashScriptParser.T__16);
                        }
                        break;
                    case 2:
                        {
                            _localctx = new CastContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 209;
                            this.typeName();
                            this.state = 210;
                            this.match(CashScriptParser.T__14);
                            this.state = 211;
                            _localctx._castable = this.expression(0);
                            this.state = 214;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 16, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 212;
                                        this.match(CashScriptParser.T__15);
                                        this.state = 213;
                                        _localctx._size = this.expression(0);
                                    }
                                    break;
                            }
                            this.state = 217;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === CashScriptParser.T__15) {
                                {
                                    this.state = 216;
                                    this.match(CashScriptParser.T__15);
                                }
                            }
                            this.state = 219;
                            this.match(CashScriptParser.T__16);
                        }
                        break;
                    case 3:
                        {
                            _localctx = new FunctionCallExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 221;
                            this.functionCall();
                        }
                        break;
                    case 4:
                        {
                            _localctx = new InstantiationContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 222;
                            this.match(CashScriptParser.T__20);
                            this.state = 223;
                            this.match(CashScriptParser.Identifier);
                            this.state = 224;
                            this.expressionList();
                        }
                        break;
                    case 5:
                        {
                            _localctx = new UnaryIntrospectionOpContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 225;
                            _localctx._scope = this.match(CashScriptParser.T__23);
                            this.state = 226;
                            this.match(CashScriptParser.T__21);
                            this.state = 227;
                            this.expression(0);
                            this.state = 228;
                            this.match(CashScriptParser.T__22);
                            this.state = 229;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === CashScriptParser.T__24 || _la === CashScriptParser.T__25)) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case 6:
                        {
                            _localctx = new UnaryIntrospectionOpContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 231;
                            _localctx._scope = this.match(CashScriptParser.T__26);
                            this.state = 232;
                            this.match(CashScriptParser.T__21);
                            this.state = 233;
                            this.expression(0);
                            this.state = 234;
                            this.match(CashScriptParser.T__22);
                            this.state = 235;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__24) | (1 << CashScriptParser.T__25) | (1 << CashScriptParser.T__27) | (1 << CashScriptParser.T__28) | (1 << CashScriptParser.T__29) | (1 << CashScriptParser.T__30))) !== 0))) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case 7:
                        {
                            _localctx = new UnaryOpContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 237;
                            _localctx._op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === CashScriptParser.T__34 || _la === CashScriptParser.T__35)) {
                                _localctx._op = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 238;
                            this.expression(14);
                        }
                        break;
                    case 8:
                        {
                            _localctx = new ArrayContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 239;
                            this.match(CashScriptParser.T__21);
                            this.state = 251;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__14) | (1 << CashScriptParser.T__20) | (1 << CashScriptParser.T__21) | (1 << CashScriptParser.T__23) | (1 << CashScriptParser.T__26))) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (CashScriptParser.T__34 - 35)) | (1 << (CashScriptParser.T__35 - 35)) | (1 << (CashScriptParser.T__47 - 35)) | (1 << (CashScriptParser.T__48 - 35)) | (1 << (CashScriptParser.T__49 - 35)) | (1 << (CashScriptParser.T__50 - 35)) | (1 << (CashScriptParser.T__51 - 35)) | (1 << (CashScriptParser.T__52 - 35)) | (1 << (CashScriptParser.BooleanLiteral - 35)) | (1 << (CashScriptParser.NumberLiteral - 35)) | (1 << (CashScriptParser.Bytes - 35)) | (1 << (CashScriptParser.StringLiteral - 35)) | (1 << (CashScriptParser.DateLiteral - 35)) | (1 << (CashScriptParser.HexLiteral - 35)) | (1 << (CashScriptParser.NullaryOp - 35)) | (1 << (CashScriptParser.Identifier - 35)))) !== 0)) {
                                {
                                    this.state = 240;
                                    this.expression(0);
                                    this.state = 245;
                                    this._errHandler.sync(this);
                                    _alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.state = 241;
                                                    this.match(CashScriptParser.T__15);
                                                    this.state = 242;
                                                    this.expression(0);
                                                }
                                            }
                                        }
                                        this.state = 247;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 18, this._ctx);
                                    }
                                    this.state = 249;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === CashScriptParser.T__15) {
                                        {
                                            this.state = 248;
                                            this.match(CashScriptParser.T__15);
                                        }
                                    }
                                }
                            }
                            this.state = 253;
                            this.match(CashScriptParser.T__22);
                        }
                        break;
                    case 9:
                        {
                            _localctx = new NullaryOpContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 254;
                            this.match(CashScriptParser.NullaryOp);
                        }
                        break;
                    case 10:
                        {
                            _localctx = new IdentifierContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 255;
                            this.match(CashScriptParser.Identifier);
                        }
                        break;
                    case 11:
                        {
                            _localctx = new LiteralExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 256;
                            this.literal();
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 300;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 298;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 22, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 259;
                                        if (!(this.precpred(this._ctx, 13))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");
                                        }
                                        this.state = 260;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & ((1 << (CashScriptParser.T__36 - 37)) | (1 << (CashScriptParser.T__37 - 37)) | (1 << (CashScriptParser.T__38 - 37)))) !== 0))) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 261;
                                        _localctx._right = this.expression(14);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 262;
                                        if (!(this.precpred(this._ctx, 12))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
                                        }
                                        this.state = 263;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === CashScriptParser.T__35 || _la === CashScriptParser.T__39)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 264;
                                        _localctx._right = this.expression(13);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 265;
                                        if (!(this.precpred(this._ctx, 11))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
                                        }
                                        this.state = 266;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CashScriptParser.T__5) | (1 << CashScriptParser.T__6) | (1 << CashScriptParser.T__7) | (1 << CashScriptParser.T__8))) !== 0))) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 267;
                                        _localctx._right = this.expression(12);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 268;
                                        if (!(this.precpred(this._ctx, 10))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                                        }
                                        this.state = 269;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === CashScriptParser.T__40 || _la === CashScriptParser.T__41)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 270;
                                        _localctx._right = this.expression(11);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 271;
                                        if (!(this.precpred(this._ctx, 9))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                                        }
                                        this.state = 272;
                                        _localctx._op = this.match(CashScriptParser.T__42);
                                        this.state = 273;
                                        _localctx._right = this.expression(10);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 274;
                                        if (!(this.precpred(this._ctx, 8))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                                        }
                                        this.state = 275;
                                        _localctx._op = this.match(CashScriptParser.T__3);
                                        this.state = 276;
                                        _localctx._right = this.expression(9);
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 277;
                                        if (!(this.precpred(this._ctx, 7))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                                        }
                                        this.state = 278;
                                        _localctx._op = this.match(CashScriptParser.T__43);
                                        this.state = 279;
                                        _localctx._right = this.expression(8);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 280;
                                        if (!(this.precpred(this._ctx, 6))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                                        }
                                        this.state = 281;
                                        _localctx._op = this.match(CashScriptParser.T__44);
                                        this.state = 282;
                                        _localctx._right = this.expression(7);
                                    }
                                    break;
                                case 9:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 283;
                                        if (!(this.precpred(this._ctx, 5))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                                        }
                                        this.state = 284;
                                        _localctx._op = this.match(CashScriptParser.T__45);
                                        this.state = 285;
                                        _localctx._right = this.expression(6);
                                    }
                                    break;
                                case 10:
                                    {
                                        _localctx = new TupleIndexOpContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 286;
                                        if (!(this.precpred(this._ctx, 19))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 19)");
                                        }
                                        this.state = 287;
                                        this.match(CashScriptParser.T__21);
                                        this.state = 288;
                                        _localctx._index = this.match(CashScriptParser.NumberLiteral);
                                        this.state = 289;
                                        this.match(CashScriptParser.T__22);
                                    }
                                    break;
                                case 11:
                                    {
                                        _localctx = new UnaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 290;
                                        if (!(this.precpred(this._ctx, 16))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 16)");
                                        }
                                        this.state = 291;
                                        _localctx._op = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === CashScriptParser.T__31 || _la === CashScriptParser.T__32)) {
                                            _localctx._op = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                                case 12:
                                    {
                                        _localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, CashScriptParser.RULE_expression);
                                        this.state = 292;
                                        if (!(this.precpred(this._ctx, 15))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 15)");
                                        }
                                        this.state = 293;
                                        _localctx._op = this.match(CashScriptParser.T__33);
                                        this.state = 294;
                                        this.match(CashScriptParser.T__14);
                                        this.state = 295;
                                        _localctx._right = this.expression(0);
                                        this.state = 296;
                                        this.match(CashScriptParser.T__16);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 302;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 23, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    modifier() {
        let _localctx = new ModifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, CashScriptParser.RULE_modifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 303;
                this.match(CashScriptParser.T__46);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    literal() {
        let _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, CashScriptParser.RULE_literal);
        try {
            this.state = 310;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case CashScriptParser.BooleanLiteral:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 305;
                        this.match(CashScriptParser.BooleanLiteral);
                    }
                    break;
                case CashScriptParser.NumberLiteral:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 306;
                        this.numberLiteral();
                    }
                    break;
                case CashScriptParser.StringLiteral:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 307;
                        this.match(CashScriptParser.StringLiteral);
                    }
                    break;
                case CashScriptParser.DateLiteral:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 308;
                        this.match(CashScriptParser.DateLiteral);
                    }
                    break;
                case CashScriptParser.HexLiteral:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 309;
                        this.match(CashScriptParser.HexLiteral);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    numberLiteral() {
        let _localctx = new NumberLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, CashScriptParser.RULE_numberLiteral);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 312;
                this.match(CashScriptParser.NumberLiteral);
                this.state = 314;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 25, this._ctx)) {
                    case 1:
                        {
                            this.state = 313;
                            this.match(CashScriptParser.NumberUnit);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeName() {
        let _localctx = new TypeNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, CashScriptParser.RULE_typeName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 316;
                _la = this._input.LA(1);
                if (!(((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (CashScriptParser.T__47 - 48)) | (1 << (CashScriptParser.T__48 - 48)) | (1 << (CashScriptParser.T__49 - 48)) | (1 << (CashScriptParser.T__50 - 48)) | (1 << (CashScriptParser.T__51 - 48)) | (1 << (CashScriptParser.T__52 - 48)) | (1 << (CashScriptParser.Bytes - 48)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 20:
                return this.expression_sempred(_localctx, predIndex);
        }
        return true;
    }
    expression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 13);
            case 1:
                return this.precpred(this._ctx, 12);
            case 2:
                return this.precpred(this._ctx, 11);
            case 3:
                return this.precpred(this._ctx, 10);
            case 4:
                return this.precpred(this._ctx, 9);
            case 5:
                return this.precpred(this._ctx, 8);
            case 6:
                return this.precpred(this._ctx, 7);
            case 7:
                return this.precpred(this._ctx, 6);
            case 8:
                return this.precpred(this._ctx, 5);
            case 9:
                return this.precpred(this._ctx, 19);
            case 10:
                return this.precpred(this._ctx, 16);
            case 11:
                return this.precpred(this._ctx, 15);
        }
        return true;
    }
    static get _ATN() {
        if (!CashScriptParser.__ATN) {
            CashScriptParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CashScriptParser._serializedATN));
        }
        return CashScriptParser.__ATN;
    }
}
CashScriptParser.T__0 = 1;
CashScriptParser.T__1 = 2;
CashScriptParser.T__2 = 3;
CashScriptParser.T__3 = 4;
CashScriptParser.T__4 = 5;
CashScriptParser.T__5 = 6;
CashScriptParser.T__6 = 7;
CashScriptParser.T__7 = 8;
CashScriptParser.T__8 = 9;
CashScriptParser.T__9 = 10;
CashScriptParser.T__10 = 11;
CashScriptParser.T__11 = 12;
CashScriptParser.T__12 = 13;
CashScriptParser.T__13 = 14;
CashScriptParser.T__14 = 15;
CashScriptParser.T__15 = 16;
CashScriptParser.T__16 = 17;
CashScriptParser.T__17 = 18;
CashScriptParser.T__18 = 19;
CashScriptParser.T__19 = 20;
CashScriptParser.T__20 = 21;
CashScriptParser.T__21 = 22;
CashScriptParser.T__22 = 23;
CashScriptParser.T__23 = 24;
CashScriptParser.T__24 = 25;
CashScriptParser.T__25 = 26;
CashScriptParser.T__26 = 27;
CashScriptParser.T__27 = 28;
CashScriptParser.T__28 = 29;
CashScriptParser.T__29 = 30;
CashScriptParser.T__30 = 31;
CashScriptParser.T__31 = 32;
CashScriptParser.T__32 = 33;
CashScriptParser.T__33 = 34;
CashScriptParser.T__34 = 35;
CashScriptParser.T__35 = 36;
CashScriptParser.T__36 = 37;
CashScriptParser.T__37 = 38;
CashScriptParser.T__38 = 39;
CashScriptParser.T__39 = 40;
CashScriptParser.T__40 = 41;
CashScriptParser.T__41 = 42;
CashScriptParser.T__42 = 43;
CashScriptParser.T__43 = 44;
CashScriptParser.T__44 = 45;
CashScriptParser.T__45 = 46;
CashScriptParser.T__46 = 47;
CashScriptParser.T__47 = 48;
CashScriptParser.T__48 = 49;
CashScriptParser.T__49 = 50;
CashScriptParser.T__50 = 51;
CashScriptParser.T__51 = 52;
CashScriptParser.T__52 = 53;
CashScriptParser.VersionLiteral = 54;
CashScriptParser.BooleanLiteral = 55;
CashScriptParser.NumberUnit = 56;
CashScriptParser.NumberLiteral = 57;
CashScriptParser.Bytes = 58;
CashScriptParser.Bound = 59;
CashScriptParser.StringLiteral = 60;
CashScriptParser.DateLiteral = 61;
CashScriptParser.HexLiteral = 62;
CashScriptParser.TxVar = 63;
CashScriptParser.NullaryOp = 64;
CashScriptParser.Identifier = 65;
CashScriptParser.WHITESPACE = 66;
CashScriptParser.COMMENT = 67;
CashScriptParser.LINE_COMMENT = 68;
CashScriptParser.RULE_sourceFile = 0;
CashScriptParser.RULE_pragmaDirective = 1;
CashScriptParser.RULE_pragmaName = 2;
CashScriptParser.RULE_pragmaValue = 3;
CashScriptParser.RULE_versionConstraint = 4;
CashScriptParser.RULE_versionOperator = 5;
CashScriptParser.RULE_contractDefinition = 6;
CashScriptParser.RULE_functionDefinition = 7;
CashScriptParser.RULE_parameterList = 8;
CashScriptParser.RULE_parameter = 9;
CashScriptParser.RULE_block = 10;
CashScriptParser.RULE_statement = 11;
CashScriptParser.RULE_variableDefinition = 12;
CashScriptParser.RULE_tupleAssignment = 13;
CashScriptParser.RULE_assignStatement = 14;
CashScriptParser.RULE_timeOpStatement = 15;
CashScriptParser.RULE_requireStatement = 16;
CashScriptParser.RULE_ifStatement = 17;
CashScriptParser.RULE_functionCall = 18;
CashScriptParser.RULE_expressionList = 19;
CashScriptParser.RULE_expression = 20;
CashScriptParser.RULE_modifier = 21;
CashScriptParser.RULE_literal = 22;
CashScriptParser.RULE_numberLiteral = 23;
CashScriptParser.RULE_typeName = 24;
// tslint:disable:no-trailing-whitespace
CashScriptParser.ruleNames = [
    "sourceFile", "pragmaDirective", "pragmaName", "pragmaValue", "versionConstraint",
    "versionOperator", "contractDefinition", "functionDefinition", "parameterList",
    "parameter", "block", "statement", "variableDefinition", "tupleAssignment",
    "assignStatement", "timeOpStatement", "requireStatement", "ifStatement",
    "functionCall", "expressionList", "expression", "modifier", "literal",
    "numberLiteral", "typeName",
];
CashScriptParser._LITERAL_NAMES = [
    undefined, "'pragma'", "';'", "'cashscript'", "'^'", "'~'", "'>='", "'>'",
    "'<'", "'<='", "'='", "'contract'", "'{'", "'}'", "'function'", "'('",
    "','", "')'", "'require'", "'if'", "'else'", "'new'", "'['", "']'", "'tx.outputs'",
    "'.value'", "'.lockingBytecode'", "'tx.inputs'", "'.outpointTransactionHash'",
    "'.outpointIndex'", "'.unlockingBytecode'", "'.sequenceNumber'", "'.reverse()'",
    "'.length'", "'.split'", "'!'", "'-'", "'*'", "'/'", "'%'", "'+'", "'=='",
    "'!='", "'&'", "'|'", "'&&'", "'||'", "'constant'", "'int'", "'bool'",
    "'string'", "'pubkey'", "'sig'", "'datasig'",
];
CashScriptParser._SYMBOLIC_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, "VersionLiteral",
    "BooleanLiteral", "NumberUnit", "NumberLiteral", "Bytes", "Bound", "StringLiteral",
    "DateLiteral", "HexLiteral", "TxVar", "NullaryOp", "Identifier", "WHITESPACE",
    "COMMENT", "LINE_COMMENT",
];
CashScriptParser.VOCABULARY = new VocabularyImpl(CashScriptParser._LITERAL_NAMES, CashScriptParser._SYMBOLIC_NAMES, []);
CashScriptParser._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03F\u0141\x04\x02" +
    "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
    "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" +
    "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" +
    "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04" +
    "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x03\x02\x07\x026\n\x02\f\x02\x0E" +
    "\x029\v\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x04\x03\x04\x03\x05\x03\x05\x05\x05G\n\x05\x03\x06\x05\x06J\n" +
    "\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x07" +
    "\bU\n\b\f\b\x0E\bX\v\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x07\t" +
    "a\n\t\f\t\x0E\td\v\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x07\nl\n\n\f" +
    "\n\x0E\no\v\n\x03\n\x05\nr\n\n\x05\nt\n\n\x03\n\x03\n\x03\v\x03\v\x03" +
    "\v\x03\f\x03\f\x07\f}\n\f\f\f\x0E\f\x80\v\f\x03\f\x03\f\x05\f\x84\n\f" +
    "\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\r\x8C\n\r\x03\x0E\x03\x0E\x05" +
    "\x0E\x90\n\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
    "\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10" +
    "\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
    "\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13" +
    "\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\xBA\n\x13\x03" +
    "\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x07\x15\xC3\n\x15" +
    "\f\x15\x0E\x15\xC6\v\x15\x03\x15\x05\x15\xC9\n\x15\x05\x15\xCB\n\x15\x03" +
    "\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
    "\x16\x03\x16\x03\x16\x05\x16\xD9\n\x16\x03\x16\x05\x16\xDC\n\x16\x03\x16" +
    "\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16" +
    "\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16" +
    "\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16\xF6\n\x16\f\x16\x0E\x16" +
    "\xF9\v\x16\x03\x16\x05\x16\xFC\n\x16\x05\x16\xFE\n\x16\x03\x16\x03\x16" +
    "\x03\x16\x03\x16\x05\x16\u0104\n\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
    "\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
    "\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
    "\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
    "\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16\u012D" +
    "\n\x16\f\x16\x0E\x16\u0130\v\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18" +
    "\x03\x18\x03\x18\x05\x18\u0139\n\x18\x03\x19\x03\x19\x05\x19\u013D\n\x19" +
    "\x03\x1A\x03\x1A\x03\x1A\x02\x02\x03*\x1B\x02\x02\x04\x02\x06\x02\b\x02" +
    "\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C" +
    "\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x02\x02\f" +
    "\x03\x02\x06\f\x03\x02\x1B\x1C\x04\x02\x1B\x1C\x1E!\x03\x02%&\x03\x02" +
    "\')\x04\x02&&**\x03\x02\b\v\x03\x02+,\x03\x02\"#\x04\x0227<<\x02\u015B" +
    "\x027\x03\x02\x02\x02\x04=\x03\x02\x02\x02\x06B\x03\x02\x02\x02\bD\x03" +
    "\x02\x02\x02\nI\x03\x02\x02\x02\fM\x03\x02\x02\x02\x0EO\x03\x02\x02\x02" +
    "\x10[\x03\x02\x02\x02\x12g\x03\x02\x02\x02\x14w\x03\x02\x02\x02\x16\x83" +
    "\x03\x02\x02\x02\x18\x8B\x03\x02\x02\x02\x1A\x8D\x03\x02\x02\x02\x1C\x96" +
    "\x03\x02\x02\x02\x1E\x9F\x03\x02\x02\x02 \xA4\x03\x02\x02\x02\"\xAC\x03" +
    "\x02\x02\x02$\xB2\x03\x02\x02\x02&\xBB\x03\x02\x02\x02(\xBE\x03\x02\x02" +
    "\x02*\u0103\x03\x02\x02\x02,\u0131\x03\x02\x02\x02.\u0138\x03\x02\x02" +
    "\x020\u013A\x03\x02\x02\x022\u013E\x03\x02\x02\x0246\x05\x04\x03\x025" +
    "4\x03\x02\x02\x0269\x03\x02\x02\x0275\x03\x02\x02\x0278\x03\x02\x02\x02" +
    "8:\x03\x02\x02\x0297\x03\x02\x02\x02:;\x05\x0E\b\x02;<\x07\x02\x02\x03" +
    "<\x03\x03\x02\x02\x02=>\x07\x03\x02\x02>?\x05\x06\x04\x02?@\x05\b\x05" +
    "\x02@A\x07\x04\x02\x02A\x05\x03\x02\x02\x02BC\x07\x05\x02\x02C\x07\x03" +
    "\x02\x02\x02DF\x05\n\x06\x02EG\x05\n\x06\x02FE\x03\x02\x02\x02FG\x03\x02" +
    "\x02\x02G\t\x03\x02\x02\x02HJ\x05\f\x07\x02IH\x03\x02\x02\x02IJ\x03\x02" +
    "\x02\x02JK\x03\x02\x02\x02KL\x078\x02\x02L\v\x03\x02\x02\x02MN\t\x02\x02" +
    "\x02N\r\x03\x02\x02\x02OP\x07\r\x02\x02PQ\x07C\x02\x02QR\x05\x12\n\x02" +
    "RV\x07\x0E\x02\x02SU\x05\x10\t\x02TS\x03\x02\x02\x02UX\x03\x02\x02\x02" +
    "VT\x03\x02\x02\x02VW\x03\x02\x02\x02WY\x03\x02\x02\x02XV\x03\x02\x02\x02" +
    "YZ\x07\x0F\x02\x02Z\x0F\x03\x02\x02\x02[\\\x07\x10\x02\x02\\]\x07C\x02" +
    "\x02]^\x05\x12\n\x02^b\x07\x0E\x02\x02_a\x05\x18\r\x02`_\x03\x02\x02\x02" +
    "ad\x03\x02\x02\x02b`\x03\x02\x02\x02bc\x03\x02\x02\x02ce\x03\x02\x02\x02" +
    "db\x03\x02\x02\x02ef\x07\x0F\x02\x02f\x11\x03\x02\x02\x02gs\x07\x11\x02" +
    "\x02hm\x05\x14\v\x02ij\x07\x12\x02\x02jl\x05\x14\v\x02ki\x03\x02\x02\x02" +
    "lo\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02nq\x03\x02\x02\x02" +
    "om\x03\x02\x02\x02pr\x07\x12\x02\x02qp\x03\x02\x02\x02qr\x03\x02\x02\x02" +
    "rt\x03\x02\x02\x02sh\x03\x02\x02\x02st\x03\x02\x02\x02tu\x03\x02\x02\x02" +
    "uv\x07\x13\x02\x02v\x13\x03\x02\x02\x02wx\x052\x1A\x02xy\x07C\x02\x02" +
    "y\x15\x03\x02\x02\x02z~\x07\x0E\x02\x02{}\x05\x18\r\x02|{\x03\x02\x02" +
    "\x02}\x80\x03\x02\x02\x02~|\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F\x81" +
    "\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x81\x84\x07\x0F\x02\x02\x82\x84" +
    "\x05\x18\r\x02\x83z\x03\x02\x02\x02\x83\x82\x03\x02\x02\x02\x84\x17\x03" +
    "\x02\x02\x02\x85\x8C\x05\x1A\x0E\x02\x86\x8C\x05\x1C\x0F\x02\x87\x8C\x05" +
    "\x1E\x10\x02\x88\x8C\x05 \x11\x02\x89\x8C\x05\"\x12\x02\x8A\x8C\x05$\x13" +
    "\x02\x8B\x85\x03\x02\x02\x02\x8B\x86\x03\x02\x02\x02\x8B\x87\x03\x02\x02" +
    "\x02\x8B\x88\x03\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8B\x8A\x03\x02\x02" +
    "\x02\x8C\x19\x03\x02\x02\x02\x8D\x8F\x052\x1A\x02\x8E\x90\x05,\x17\x02" +
    "\x8F\x8E\x03\x02\x02\x02\x8F\x90\x03\x02\x02\x02\x90\x91\x03\x02\x02\x02" +
    "\x91\x92\x07C\x02\x02\x92\x93\x07\f\x02\x02\x93\x94\x05*\x16\x02\x94\x95" +
    "\x07\x04\x02\x02\x95\x1B\x03\x02\x02\x02\x96\x97\x052\x1A\x02\x97\x98" +
    "\x07C\x02\x02\x98\x99\x07\x12\x02\x02\x99\x9A\x052\x1A\x02\x9A\x9B\x07" +
    "C\x02\x02\x9B\x9C\x07\f\x02\x02\x9C\x9D\x05*\x16\x02\x9D\x9E\x07\x04\x02" +
    "\x02\x9E\x1D\x03\x02\x02\x02\x9F\xA0\x07C\x02\x02\xA0\xA1\x07\f\x02\x02" +
    "\xA1\xA2\x05*\x16\x02\xA2\xA3\x07\x04\x02\x02\xA3\x1F\x03\x02\x02\x02" +
    "\xA4\xA5\x07\x14\x02\x02\xA5\xA6\x07\x11\x02\x02\xA6\xA7\x07A\x02\x02" +
    "\xA7\xA8\x07\b\x02\x02\xA8\xA9\x05*\x16\x02\xA9\xAA\x07\x13\x02\x02\xAA" +
    "\xAB\x07\x04\x02\x02\xAB!\x03\x02\x02\x02\xAC\xAD\x07\x14\x02\x02\xAD" +
    "\xAE\x07\x11\x02\x02\xAE\xAF\x05*\x16\x02\xAF\xB0\x07\x13\x02\x02\xB0" +
    "\xB1\x07\x04\x02\x02\xB1#\x03\x02\x02\x02\xB2\xB3\x07\x15\x02\x02\xB3" +
    "\xB4\x07\x11\x02\x02\xB4\xB5\x05*\x16\x02\xB5\xB6\x07\x13\x02\x02\xB6" +
    "\xB9\x05\x16\f\x02\xB7\xB8\x07\x16\x02\x02\xB8\xBA\x05\x16\f\x02\xB9\xB7" +
    "\x03\x02\x02\x02\xB9\xBA\x03\x02\x02\x02\xBA%\x03\x02\x02\x02\xBB\xBC" +
    "\x07C\x02\x02\xBC\xBD\x05(\x15\x02\xBD\'\x03\x02\x02\x02\xBE\xCA\x07\x11" +
    "\x02\x02\xBF\xC4\x05*\x16\x02\xC0\xC1\x07\x12\x02\x02\xC1\xC3\x05*\x16" +
    "\x02\xC2\xC0\x03\x02\x02\x02\xC3\xC6\x03\x02\x02\x02\xC4\xC2\x03\x02\x02" +
    "\x02\xC4\xC5\x03\x02\x02\x02\xC5\xC8\x03\x02\x02\x02\xC6\xC4\x03\x02\x02" +
    "\x02\xC7\xC9\x07\x12\x02\x02\xC8\xC7\x03\x02\x02\x02\xC8\xC9\x03\x02\x02" +
    "\x02\xC9\xCB\x03\x02\x02\x02\xCA\xBF\x03\x02\x02\x02\xCA\xCB\x03\x02\x02" +
    "\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCD\x07\x13\x02\x02\xCD)\x03\x02\x02" +
    "\x02\xCE\xCF\b\x16\x01\x02\xCF\xD0\x07\x11\x02\x02\xD0\xD1\x05*\x16\x02" +
    "\xD1\xD2\x07\x13\x02\x02\xD2\u0104\x03\x02\x02\x02\xD3\xD4\x052\x1A\x02" +
    "\xD4\xD5\x07\x11\x02\x02\xD5\xD8\x05*\x16\x02\xD6\xD7\x07\x12\x02\x02" +
    "\xD7\xD9\x05*\x16\x02\xD8\xD6\x03\x02\x02\x02\xD8\xD9\x03\x02\x02\x02" +
    "\xD9\xDB\x03\x02\x02\x02\xDA\xDC\x07\x12\x02\x02\xDB\xDA\x03\x02\x02\x02" +
    "\xDB\xDC\x03\x02\x02\x02\xDC\xDD\x03\x02\x02\x02\xDD\xDE\x07\x13\x02\x02" +
    "\xDE\u0104\x03\x02\x02\x02\xDF\u0104\x05&\x14\x02\xE0\xE1\x07\x17\x02" +
    "\x02\xE1\xE2\x07C\x02\x02\xE2\u0104\x05(\x15\x02\xE3\xE4\x07\x1A\x02\x02" +
    "\xE4\xE5\x07\x18\x02\x02\xE5\xE6\x05*\x16\x02\xE6\xE7\x07\x19\x02\x02" +
    "\xE7\xE8\t\x03\x02\x02\xE8\u0104\x03\x02\x02\x02\xE9\xEA\x07\x1D\x02\x02" +
    "\xEA\xEB\x07\x18\x02\x02\xEB\xEC\x05*\x16\x02\xEC\xED\x07\x19\x02\x02" +
    "\xED\xEE\t\x04\x02\x02\xEE\u0104\x03\x02\x02\x02\xEF\xF0\t\x05\x02\x02" +
    "\xF0\u0104\x05*\x16\x10\xF1\xFD\x07\x18\x02\x02\xF2\xF7\x05*\x16\x02\xF3" +
    "\xF4\x07\x12\x02\x02\xF4\xF6\x05*\x16\x02\xF5\xF3\x03\x02\x02\x02\xF6" +
    "\xF9\x03\x02\x02\x02\xF7\xF5\x03\x02\x02\x02\xF7\xF8\x03\x02\x02\x02\xF8" +
    "\xFB\x03\x02\x02\x02\xF9\xF7\x03\x02\x02\x02\xFA\xFC\x07\x12\x02\x02\xFB" +
    "\xFA\x03\x02\x02\x02\xFB\xFC\x03\x02\x02\x02\xFC\xFE\x03\x02\x02\x02\xFD" +
    "\xF2\x03\x02\x02\x02\xFD\xFE\x03\x02\x02\x02\xFE\xFF\x03\x02\x02\x02\xFF" +
    "\u0104\x07\x19\x02\x02\u0100\u0104\x07B\x02\x02\u0101\u0104\x07C\x02\x02" +
    "\u0102\u0104\x05.\x18\x02\u0103\xCE\x03\x02\x02\x02\u0103\xD3\x03\x02" +
    "\x02\x02\u0103\xDF\x03\x02\x02\x02\u0103\xE0\x03\x02\x02\x02\u0103\xE3" +
    "\x03\x02\x02\x02\u0103\xE9\x03\x02\x02\x02\u0103\xEF\x03\x02\x02\x02\u0103" +
    "\xF1\x03\x02\x02\x02\u0103\u0100\x03\x02\x02\x02\u0103\u0101\x03\x02\x02" +
    "\x02\u0103\u0102\x03\x02\x02\x02\u0104\u012E\x03\x02\x02\x02\u0105\u0106" +
    "\f\x0F\x02\x02\u0106\u0107\t\x06\x02\x02\u0107\u012D\x05*\x16\x10\u0108" +
    "\u0109\f\x0E\x02\x02\u0109\u010A\t\x07\x02\x02\u010A\u012D\x05*\x16\x0F" +
    "\u010B\u010C\f\r\x02\x02\u010C\u010D\t\b\x02\x02\u010D\u012D\x05*\x16" +
    "\x0E\u010E\u010F\f\f\x02\x02\u010F\u0110\t\t\x02\x02\u0110\u012D\x05*" +
    "\x16\r\u0111\u0112\f\v\x02\x02\u0112\u0113\x07-\x02\x02\u0113\u012D\x05" +
    "*\x16\f\u0114\u0115\f\n\x02\x02\u0115\u0116\x07\x06\x02\x02\u0116\u012D" +
    "\x05*\x16\v\u0117\u0118\f\t\x02\x02\u0118\u0119\x07.\x02\x02\u0119\u012D" +
    "\x05*\x16\n\u011A\u011B\f\b\x02\x02\u011B\u011C\x07/\x02\x02\u011C\u012D" +
    "\x05*\x16\t\u011D\u011E\f\x07\x02\x02\u011E\u011F\x070\x02\x02\u011F\u012D" +
    "\x05*\x16\b\u0120\u0121\f\x15\x02\x02\u0121\u0122\x07\x18\x02\x02\u0122" +
    "\u0123\x07;\x02\x02\u0123\u012D\x07\x19\x02\x02\u0124\u0125\f\x12\x02" +
    "\x02\u0125\u012D\t\n\x02\x02\u0126\u0127\f\x11\x02\x02\u0127\u0128\x07" +
    "$\x02\x02\u0128\u0129\x07\x11\x02\x02\u0129\u012A\x05*\x16\x02\u012A\u012B" +
    "\x07\x13\x02\x02\u012B\u012D\x03\x02\x02\x02\u012C\u0105\x03\x02\x02\x02" +
    "\u012C\u0108\x03\x02\x02\x02\u012C\u010B\x03\x02\x02\x02\u012C\u010E\x03" +
    "\x02\x02\x02\u012C\u0111\x03\x02\x02\x02\u012C\u0114\x03\x02\x02\x02\u012C" +
    "\u0117\x03\x02\x02\x02\u012C\u011A\x03\x02\x02\x02\u012C\u011D\x03\x02" +
    "\x02\x02\u012C\u0120\x03\x02\x02\x02\u012C\u0124\x03\x02\x02\x02\u012C" +
    "\u0126\x03\x02\x02\x02\u012D\u0130\x03\x02\x02\x02\u012E\u012C\x03\x02" +
    "\x02\x02\u012E\u012F\x03\x02\x02\x02\u012F+\x03\x02\x02\x02\u0130\u012E" +
    "\x03\x02\x02\x02\u0131\u0132\x071\x02\x02\u0132-\x03\x02\x02\x02\u0133" +
    "\u0139\x079\x02\x02\u0134\u0139\x050\x19\x02\u0135\u0139\x07>\x02\x02" +
    "\u0136\u0139\x07?\x02\x02\u0137\u0139\x07@\x02\x02\u0138\u0133\x03\x02" +
    "\x02\x02\u0138\u0134\x03\x02\x02\x02\u0138\u0135\x03\x02\x02\x02\u0138" +
    "\u0136\x03\x02\x02\x02\u0138\u0137\x03\x02\x02\x02\u0139/\x03\x02\x02" +
    "\x02\u013A\u013C\x07;\x02\x02\u013B\u013D\x07:\x02\x02\u013C\u013B\x03" +
    "\x02\x02\x02\u013C\u013D\x03\x02\x02\x02\u013D1\x03\x02\x02\x02\u013E" +
    "\u013F\t\v\x02\x02\u013F3\x03\x02\x02\x02\x1C7FIVbmqs~\x83\x8B\x8F\xB9" +
    "\xC4\xC8\xCA\xD8\xDB\xF7\xFB\xFD\u0103\u012C\u012E\u0138\u013C";
export class SourceFileContext extends ParserRuleContext {
    contractDefinition() {
        return this.getRuleContext(0, ContractDefinitionContext);
    }
    EOF() { return this.getToken(CashScriptParser.EOF, 0); }
    pragmaDirective(i) {
        if (i === undefined) {
            return this.getRuleContexts(PragmaDirectiveContext);
        }
        else {
            return this.getRuleContext(i, PragmaDirectiveContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_sourceFile; }
    // @Override
    enterRule(listener) {
        if (listener.enterSourceFile) {
            listener.enterSourceFile(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSourceFile) {
            listener.exitSourceFile(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSourceFile) {
            return visitor.visitSourceFile(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class PragmaDirectiveContext extends ParserRuleContext {
    pragmaName() {
        return this.getRuleContext(0, PragmaNameContext);
    }
    pragmaValue() {
        return this.getRuleContext(0, PragmaValueContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_pragmaDirective; }
    // @Override
    enterRule(listener) {
        if (listener.enterPragmaDirective) {
            listener.enterPragmaDirective(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPragmaDirective) {
            listener.exitPragmaDirective(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPragmaDirective) {
            return visitor.visitPragmaDirective(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class PragmaNameContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_pragmaName; }
    // @Override
    enterRule(listener) {
        if (listener.enterPragmaName) {
            listener.enterPragmaName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPragmaName) {
            listener.exitPragmaName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPragmaName) {
            return visitor.visitPragmaName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class PragmaValueContext extends ParserRuleContext {
    versionConstraint(i) {
        if (i === undefined) {
            return this.getRuleContexts(VersionConstraintContext);
        }
        else {
            return this.getRuleContext(i, VersionConstraintContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_pragmaValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterPragmaValue) {
            listener.enterPragmaValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPragmaValue) {
            listener.exitPragmaValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPragmaValue) {
            return visitor.visitPragmaValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class VersionConstraintContext extends ParserRuleContext {
    VersionLiteral() { return this.getToken(CashScriptParser.VersionLiteral, 0); }
    versionOperator() {
        return this.tryGetRuleContext(0, VersionOperatorContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_versionConstraint; }
    // @Override
    enterRule(listener) {
        if (listener.enterVersionConstraint) {
            listener.enterVersionConstraint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVersionConstraint) {
            listener.exitVersionConstraint(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitVersionConstraint) {
            return visitor.visitVersionConstraint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class VersionOperatorContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_versionOperator; }
    // @Override
    enterRule(listener) {
        if (listener.enterVersionOperator) {
            listener.enterVersionOperator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVersionOperator) {
            listener.exitVersionOperator(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitVersionOperator) {
            return visitor.visitVersionOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ContractDefinitionContext extends ParserRuleContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    parameterList() {
        return this.getRuleContext(0, ParameterListContext);
    }
    functionDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(FunctionDefinitionContext);
        }
        else {
            return this.getRuleContext(i, FunctionDefinitionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_contractDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterContractDefinition) {
            listener.enterContractDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitContractDefinition) {
            listener.exitContractDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitContractDefinition) {
            return visitor.visitContractDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionDefinitionContext extends ParserRuleContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    parameterList() {
        return this.getRuleContext(0, ParameterListContext);
    }
    statement(i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_functionDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionDefinition) {
            listener.enterFunctionDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionDefinition) {
            listener.exitFunctionDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionDefinition) {
            return visitor.visitFunctionDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterListContext extends ParserRuleContext {
    parameter(i) {
        if (i === undefined) {
            return this.getRuleContexts(ParameterContext);
        }
        else {
            return this.getRuleContext(i, ParameterContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_parameterList; }
    // @Override
    enterRule(listener) {
        if (listener.enterParameterList) {
            listener.enterParameterList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParameterList) {
            listener.exitParameterList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParameterList) {
            return visitor.visitParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterContext extends ParserRuleContext {
    typeName() {
        return this.getRuleContext(0, TypeNameContext);
    }
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_parameter; }
    // @Override
    enterRule(listener) {
        if (listener.enterParameter) {
            listener.enterParameter(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParameter) {
            listener.exitParameter(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParameter) {
            return visitor.visitParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class BlockContext extends ParserRuleContext {
    statement(i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_block; }
    // @Override
    enterRule(listener) {
        if (listener.enterBlock) {
            listener.enterBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBlock) {
            listener.exitBlock(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBlock) {
            return visitor.visitBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementContext extends ParserRuleContext {
    variableDefinition() {
        return this.tryGetRuleContext(0, VariableDefinitionContext);
    }
    tupleAssignment() {
        return this.tryGetRuleContext(0, TupleAssignmentContext);
    }
    assignStatement() {
        return this.tryGetRuleContext(0, AssignStatementContext);
    }
    timeOpStatement() {
        return this.tryGetRuleContext(0, TimeOpStatementContext);
    }
    requireStatement() {
        return this.tryGetRuleContext(0, RequireStatementContext);
    }
    ifStatement() {
        return this.tryGetRuleContext(0, IfStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_statement; }
    // @Override
    enterRule(listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class VariableDefinitionContext extends ParserRuleContext {
    typeName() {
        return this.getRuleContext(0, TypeNameContext);
    }
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    modifier() {
        return this.tryGetRuleContext(0, ModifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_variableDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterVariableDefinition) {
            listener.enterVariableDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVariableDefinition) {
            listener.exitVariableDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitVariableDefinition) {
            return visitor.visitVariableDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TupleAssignmentContext extends ParserRuleContext {
    typeName(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeNameContext);
        }
        else {
            return this.getRuleContext(i, TypeNameContext);
        }
    }
    Identifier(i) {
        if (i === undefined) {
            return this.getTokens(CashScriptParser.Identifier);
        }
        else {
            return this.getToken(CashScriptParser.Identifier, i);
        }
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_tupleAssignment; }
    // @Override
    enterRule(listener) {
        if (listener.enterTupleAssignment) {
            listener.enterTupleAssignment(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTupleAssignment) {
            listener.exitTupleAssignment(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTupleAssignment) {
            return visitor.visitTupleAssignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class AssignStatementContext extends ParserRuleContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_assignStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterAssignStatement) {
            listener.enterAssignStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAssignStatement) {
            listener.exitAssignStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAssignStatement) {
            return visitor.visitAssignStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimeOpStatementContext extends ParserRuleContext {
    TxVar() { return this.getToken(CashScriptParser.TxVar, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_timeOpStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterTimeOpStatement) {
            listener.enterTimeOpStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTimeOpStatement) {
            listener.exitTimeOpStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTimeOpStatement) {
            return visitor.visitTimeOpStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class RequireStatementContext extends ParserRuleContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_requireStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterRequireStatement) {
            listener.enterRequireStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRequireStatement) {
            listener.exitRequireStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitRequireStatement) {
            return visitor.visitRequireStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class IfStatementContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    block(i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockContext);
        }
        else {
            return this.getRuleContext(i, BlockContext);
        }
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_ifStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfStatement) {
            listener.enterIfStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfStatement) {
            listener.exitIfStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallContext extends ParserRuleContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    expressionList() {
        return this.getRuleContext(0, ExpressionListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_functionCall; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionCall) {
            listener.enterFunctionCall(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionCall) {
            listener.exitFunctionCall(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExpressionListContext extends ParserRuleContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_expressionList; }
    // @Override
    enterRule(listener) {
        if (listener.enterExpressionList) {
            listener.enterExpressionList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExpressionList) {
            listener.exitExpressionList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExpressionList) {
            return visitor.visitExpressionList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExpressionContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_expression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
export class ParenthesisedContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterParenthesised) {
            listener.enterParenthesised(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParenthesised) {
            listener.exitParenthesised(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParenthesised) {
            return visitor.visitParenthesised(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class CastContext extends ExpressionContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    typeName() {
        return this.getRuleContext(0, TypeNameContext);
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    // @Override
    enterRule(listener) {
        if (listener.enterCast) {
            listener.enterCast(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCast) {
            listener.exitCast(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallExpressionContext extends ExpressionContext {
    functionCall() {
        return this.getRuleContext(0, FunctionCallContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionCallExpression) {
            listener.enterFunctionCallExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionCallExpression) {
            listener.exitFunctionCallExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionCallExpression) {
            return visitor.visitFunctionCallExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class InstantiationContext extends ExpressionContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    expressionList() {
        return this.getRuleContext(0, ExpressionListContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterInstantiation) {
            listener.enterInstantiation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInstantiation) {
            listener.exitInstantiation(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInstantiation) {
            return visitor.visitInstantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TupleIndexOpContext extends ExpressionContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    NumberLiteral() { return this.getToken(CashScriptParser.NumberLiteral, 0); }
    // @Override
    enterRule(listener) {
        if (listener.enterTupleIndexOp) {
            listener.enterTupleIndexOp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTupleIndexOp) {
            listener.exitTupleIndexOp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTupleIndexOp) {
            return visitor.visitTupleIndexOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnaryIntrospectionOpContext extends ExpressionContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterUnaryIntrospectionOp) {
            listener.enterUnaryIntrospectionOp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnaryIntrospectionOp) {
            listener.exitUnaryIntrospectionOp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnaryIntrospectionOp) {
            return visitor.visitUnaryIntrospectionOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnaryOpContext extends ExpressionContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterUnaryOp) {
            listener.enterUnaryOp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnaryOp) {
            listener.exitUnaryOp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnaryOp) {
            return visitor.visitUnaryOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryOpContext extends ExpressionContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    // @Override
    enterRule(listener) {
        if (listener.enterBinaryOp) {
            listener.enterBinaryOp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBinaryOp) {
            listener.exitBinaryOp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBinaryOp) {
            return visitor.visitBinaryOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterArray) {
            listener.enterArray(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArray) {
            listener.exitArray(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArray) {
            return visitor.visitArray(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullaryOpContext extends ExpressionContext {
    NullaryOp() { return this.getToken(CashScriptParser.NullaryOp, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterNullaryOp) {
            listener.enterNullaryOp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNullaryOp) {
            listener.exitNullaryOp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNullaryOp) {
            return visitor.visitNullaryOp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierContext extends ExpressionContext {
    Identifier() { return this.getToken(CashScriptParser.Identifier, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifier) {
            listener.enterIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifier) {
            listener.exitIdentifier(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class LiteralExpressionContext extends ExpressionContext {
    literal() {
        return this.getRuleContext(0, LiteralContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterLiteralExpression) {
            listener.enterLiteralExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLiteralExpression) {
            listener.exitLiteralExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLiteralExpression) {
            return visitor.visitLiteralExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModifierContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_modifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterModifier) {
            listener.enterModifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitModifier) {
            listener.exitModifier(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitModifier) {
            return visitor.visitModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class LiteralContext extends ParserRuleContext {
    BooleanLiteral() { return this.tryGetToken(CashScriptParser.BooleanLiteral, 0); }
    numberLiteral() {
        return this.tryGetRuleContext(0, NumberLiteralContext);
    }
    StringLiteral() { return this.tryGetToken(CashScriptParser.StringLiteral, 0); }
    DateLiteral() { return this.tryGetToken(CashScriptParser.DateLiteral, 0); }
    HexLiteral() { return this.tryGetToken(CashScriptParser.HexLiteral, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_literal; }
    // @Override
    enterRule(listener) {
        if (listener.enterLiteral) {
            listener.enterLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLiteral) {
            listener.exitLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumberLiteralContext extends ParserRuleContext {
    NumberLiteral() { return this.getToken(CashScriptParser.NumberLiteral, 0); }
    NumberUnit() { return this.tryGetToken(CashScriptParser.NumberUnit, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_numberLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterNumberLiteral) {
            listener.enterNumberLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNumberLiteral) {
            listener.exitNumberLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNumberLiteral) {
            return visitor.visitNumberLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeNameContext extends ParserRuleContext {
    Bytes() { return this.getToken(CashScriptParser.Bytes, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return CashScriptParser.RULE_typeName; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeName) {
            listener.enterTypeName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeName) {
            listener.exitTypeName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeName) {
            return visitor.visitTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
//# sourceMappingURL=CashScriptParser.js.map