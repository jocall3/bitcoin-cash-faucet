"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileNullaryOp = exports.compileUnaryOp = exports.compileBinaryOp = exports.compileGlobalFunction = exports.compileCast = exports.compileTimeOp = void 0;
const utils_1 = require("@cashscript/utils");
const Operator_js_1 = require("../ast/Operator.js");
const Globals_js_1 = require("../ast/Globals.js");
function compileTimeOp(op) {
    const mapping = {
        [Globals_js_1.TimeOp.CHECK_LOCKTIME]: [utils_1.Op.OP_CHECKLOCKTIMEVERIFY, utils_1.Op.OP_DROP],
        [Globals_js_1.TimeOp.CHECK_SEQUENCE]: [utils_1.Op.OP_CHECKSEQUENCEVERIFY, utils_1.Op.OP_DROP],
    };
    return mapping[op];
}
exports.compileTimeOp = compileTimeOp;
function compileCast(from, to) {
    if (from === utils_1.PrimitiveType.INT && to instanceof utils_1.BytesType && to.bound !== undefined) {
        return [(0, utils_1.encodeInt)(to.bound), utils_1.Op.OP_NUM2BIN];
    }
    if (from !== utils_1.PrimitiveType.INT && to === utils_1.PrimitiveType.INT) {
        return [utils_1.Op.OP_BIN2NUM];
    }
    return [];
}
exports.compileCast = compileCast;
function compileGlobalFunction(fn) {
    const mapping = {
        [Globals_js_1.GlobalFunction.ABS]: [utils_1.Op.OP_ABS],
        [Globals_js_1.GlobalFunction.CHECKDATASIG]: [utils_1.Op.OP_CHECKDATASIG],
        [Globals_js_1.GlobalFunction.CHECKMULTISIG]: [utils_1.Op.OP_CHECKMULTISIG],
        [Globals_js_1.GlobalFunction.CHECKSIG]: [utils_1.Op.OP_CHECKSIG],
        [Globals_js_1.GlobalFunction.MAX]: [utils_1.Op.OP_MAX],
        [Globals_js_1.GlobalFunction.MIN]: [utils_1.Op.OP_MIN],
        [Globals_js_1.GlobalFunction.RIPEMD160]: [utils_1.Op.OP_RIPEMD160],
        [Globals_js_1.GlobalFunction.SHA1]: [utils_1.Op.OP_SHA1],
        [Globals_js_1.GlobalFunction.SHA256]: [utils_1.Op.OP_SHA256],
        [Globals_js_1.GlobalFunction.HASH160]: [utils_1.Op.OP_HASH160],
        [Globals_js_1.GlobalFunction.HASH256]: [utils_1.Op.OP_HASH256],
        [Globals_js_1.GlobalFunction.WITHIN]: [utils_1.Op.OP_WITHIN],
    };
    return mapping[fn];
}
exports.compileGlobalFunction = compileGlobalFunction;
function compileBinaryOp(op, numeric = false) {
    const mapping = {
        [Operator_js_1.BinaryOperator.MUL]: [utils_1.Op.OP_MUL],
        [Operator_js_1.BinaryOperator.DIV]: [utils_1.Op.OP_DIV],
        [Operator_js_1.BinaryOperator.MOD]: [utils_1.Op.OP_MOD],
        [Operator_js_1.BinaryOperator.PLUS]: [utils_1.Op.OP_CAT],
        [Operator_js_1.BinaryOperator.MINUS]: [utils_1.Op.OP_SUB],
        [Operator_js_1.BinaryOperator.LT]: [utils_1.Op.OP_LESSTHAN],
        [Operator_js_1.BinaryOperator.LE]: [utils_1.Op.OP_LESSTHANOREQUAL],
        [Operator_js_1.BinaryOperator.GT]: [utils_1.Op.OP_GREATERTHAN],
        [Operator_js_1.BinaryOperator.GE]: [utils_1.Op.OP_GREATERTHANOREQUAL],
        [Operator_js_1.BinaryOperator.EQ]: [utils_1.Op.OP_EQUAL],
        [Operator_js_1.BinaryOperator.NE]: [utils_1.Op.OP_EQUAL, utils_1.Op.OP_NOT],
        [Operator_js_1.BinaryOperator.AND]: [utils_1.Op.OP_BOOLAND],
        [Operator_js_1.BinaryOperator.OR]: [utils_1.Op.OP_BOOLOR],
        [Operator_js_1.BinaryOperator.BIT_AND]: [utils_1.Op.OP_AND],
        [Operator_js_1.BinaryOperator.BIT_OR]: [utils_1.Op.OP_OR],
        [Operator_js_1.BinaryOperator.BIT_XOR]: [utils_1.Op.OP_XOR],
        [Operator_js_1.BinaryOperator.SPLIT]: [utils_1.Op.OP_SPLIT],
    };
    if (numeric) {
        mapping[Operator_js_1.BinaryOperator.PLUS] = [utils_1.Op.OP_ADD];
        mapping[Operator_js_1.BinaryOperator.EQ] = [utils_1.Op.OP_NUMEQUAL];
        mapping[Operator_js_1.BinaryOperator.NE] = [utils_1.Op.OP_NUMNOTEQUAL];
    }
    return mapping[op];
}
exports.compileBinaryOp = compileBinaryOp;
function compileUnaryOp(op) {
    const mapping = {
        [Operator_js_1.UnaryOperator.NOT]: [utils_1.Op.OP_NOT],
        [Operator_js_1.UnaryOperator.NEGATE]: [utils_1.Op.OP_NEGATE],
        [Operator_js_1.UnaryOperator.SIZE]: [utils_1.Op.OP_SIZE, utils_1.Op.OP_NIP],
        [Operator_js_1.UnaryOperator.REVERSE]: [utils_1.Op.OP_REVERSEBYTES],
        [Operator_js_1.UnaryOperator.INPUT_VALUE]: [utils_1.IntrospectionOp.OP_UTXOVALUE],
        [Operator_js_1.UnaryOperator.INPUT_LOCKING_BYTECODE]: [utils_1.IntrospectionOp.OP_UTXOBYTECODE],
        [Operator_js_1.UnaryOperator.INPUT_OUTPOINT_HASH]: [utils_1.IntrospectionOp.OP_OUTPOINTTXHASH],
        [Operator_js_1.UnaryOperator.INPUT_OUTPOINT_INDEX]: [utils_1.IntrospectionOp.OP_OUTPOINTINDEX],
        [Operator_js_1.UnaryOperator.INPUT_UNLOCKING_BYTECODE]: [utils_1.IntrospectionOp.OP_INPUTBYTECODE],
        [Operator_js_1.UnaryOperator.INPUT_SEQUENCE_NUMBER]: [utils_1.IntrospectionOp.OP_INPUTSEQUENCENUMBER],
        [Operator_js_1.UnaryOperator.OUTPUT_VALUE]: [utils_1.IntrospectionOp.OP_OUTPUTVALUE],
        [Operator_js_1.UnaryOperator.OUTPUT_LOCKING_BYTECODE]: [utils_1.IntrospectionOp.OP_OUTPUTBYTECODE],
    };
    return mapping[op];
}
exports.compileUnaryOp = compileUnaryOp;
function compileNullaryOp(op) {
    const mapping = {
        [Operator_js_1.NullaryOperator.INPUT_INDEX]: [utils_1.IntrospectionOp.OP_INPUTINDEX],
        [Operator_js_1.NullaryOperator.BYTECODE]: [utils_1.IntrospectionOp.OP_ACTIVEBYTECODE],
        [Operator_js_1.NullaryOperator.INPUT_COUNT]: [utils_1.IntrospectionOp.OP_TXINPUTCOUNT],
        [Operator_js_1.NullaryOperator.OUTPUT_COUNT]: [utils_1.IntrospectionOp.OP_TXOUTPUTCOUNT],
        [Operator_js_1.NullaryOperator.VERSION]: [utils_1.IntrospectionOp.OP_TXVERSION],
        [Operator_js_1.NullaryOperator.LOCKTIME]: [utils_1.IntrospectionOp.OP_TXLOCKTIME],
    };
    return mapping[op];
}
exports.compileNullaryOp = compileNullaryOp;
//# sourceMappingURL=utils.js.map