#! /usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const libauth_1 = require("@bitauth/libauth");
const utils_1 = require("@cashscript/utils");
const commander_1 = require("commander");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const index_js_1 = require("./index.js");
commander_1.program
    .storeOptionsAsProperties(false)
    .name('cashc')
    .version(index_js_1.version, '-V, --version', 'Output the version number.')
    .usage('[options] [source_file]')
    .option('-o, --output <path>', 'Specify a file to output the generated artifact.')
    .option('-h, --hex', 'Compile the contract to hex format rather than a full artifact.')
    .option('-A, --asm', 'Compile the contract to ASM format rather than a full artifact.')
    .option('-c, --opcount', 'Display the number of opcodes in the compiled bytecode.')
    .option('-s, --size', 'Display the size in bytes of the compiled bytecode.')
    .helpOption('-?, --help', 'Display help')
    .parse();
const opts = commander_1.program.opts();
run();
function run() {
    ensure(commander_1.program.args.length === 1, 'Please provide exactly one source file');
    ensure(!(opts.asm && opts.hex), 'Flags --asm and --hex cannot be used together');
    ensure(!(opts.asm || opts.hex) || !opts.output, 'Flags --asm or --hex cannot be used with --output');
    ensure(!opts.args || opts.asm || opts.hex, '--args can only be used with --asm or --hex');
    const sourceFile = path_1.default.resolve(commander_1.program.args[0]);
    ensure(fs_1.default.existsSync(sourceFile) && fs_1.default.statSync(sourceFile).isFile(), 'Please provide a valid source file');
    const outputFile = opts.output && opts.output !== '-' && path_1.default.resolve(opts.output);
    try {
        const artifact = (0, index_js_1.compileFile)(sourceFile);
        const script = (0, utils_1.asmToScript)(artifact.bytecode);
        const opcount = (0, utils_1.countOpcodes)(script);
        const bytesize = (0, utils_1.calculateBytesize)(script);
        if (opcount > 201) {
            console.warn('Warning: Your contract\'s opcount is over the limit of 201 and will not be accepted by the BCH network');
        }
        if (bytesize > 520) {
            console.warn('Warning: Your contract\'s bytesize is over the limit of 520 and will not be accepted by the BCH network');
        }
        if (opts.asm) {
            console.log((0, utils_1.scriptToAsm)(script));
            return;
        }
        if (opts.hex) {
            console.log((0, libauth_1.binToHex)((0, utils_1.scriptToBytecode)(script)));
            return;
        }
        // Opcount and size checks can happen together, but do not output compilation result
        if (opts.opcount || opts.size) {
            if (opts.opcount) {
                console.log('Opcode count:', opcount);
            }
            if (opts.size) {
                console.log('Bytesize:', bytesize);
            }
            return;
        }
        if (outputFile) {
            // Create output file and write the artifact to it
            const outputDir = path_1.default.dirname(outputFile);
            if (!fs_1.default.existsSync(outputDir)) {
                fs_1.default.mkdirSync(outputDir, { recursive: true });
            }
            (0, utils_1.exportArtifact)(artifact, outputFile);
        }
        else {
            // Output artifact to STDOUT
            console.log(JSON.stringify(artifact, null, 2));
        }
    }
    catch (e) {
        abort(e.message);
    }
}
function ensure(condition, msg, code) {
    condition || abort(msg, code);
}
function abort(msg, code = 1) {
    console.error(msg);
    process.exit(code);
}
//# sourceMappingURL=cashc-cli.js.map