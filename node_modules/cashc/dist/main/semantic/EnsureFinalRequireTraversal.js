"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AST_js_1 = require("../ast/AST.js");
const AstTraversal_js_1 = __importDefault(require("../ast/AstTraversal.js"));
const Errors_js_1 = require("../Errors.js");
class EnsureFinalRequireTraversal extends AstTraversal_js_1.default {
    visitContract(node) {
        node.parameters = this.visitList(node.parameters);
        node.functions = this.visitList(node.functions);
        if (node.functions.length === 0) {
            throw new Errors_js_1.EmptyContractError(node);
        }
        return node;
    }
    visitFunctionDefinition(node) {
        node.parameters = this.visitList(node.parameters);
        node.body = this.visit(node.body);
        if (node.body.statements === undefined || node.body.statements.length === 0) {
            throw new Errors_js_1.EmptyFunctionError(node);
        }
        ensureFinalStatementIsRequire(node.body.statements);
        return node;
    }
}
exports.default = EnsureFinalRequireTraversal;
function ensureFinalStatementIsRequire(statements = []) {
    var _a;
    const finalStatement = statements[statements.length - 1];
    if (!finalStatement)
        return;
    // If the final statement is a branch node, then both branches need to end with a require()
    if (finalStatement instanceof AST_js_1.BranchNode) {
        ensureFinalStatementIsRequire(finalStatement.ifBlock.statements);
        ensureFinalStatementIsRequire((_a = finalStatement.elseBlock) === null || _a === void 0 ? void 0 : _a.statements);
        return;
    }
    // The final statement needs to be a require()
    if (!(finalStatement instanceof AST_js_1.RequireNode || finalStatement instanceof AST_js_1.TimeOpNode)) {
        throw new Errors_js_1.FinalRequireStatementError(finalStatement);
    }
}
//# sourceMappingURL=EnsureFinalRequireTraversal.js.map