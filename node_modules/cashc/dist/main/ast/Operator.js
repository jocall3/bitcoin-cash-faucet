"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryOperator = exports.UnaryOperator = exports.NullaryOperator = void 0;
var NullaryOperator;
(function (NullaryOperator) {
    NullaryOperator["INPUT_INDEX"] = "this.activeInputIndex";
    NullaryOperator["BYTECODE"] = "this.activeBytecode";
    NullaryOperator["INPUT_COUNT"] = "tx.inputs.length";
    NullaryOperator["OUTPUT_COUNT"] = "tx.outputs.length";
    NullaryOperator["VERSION"] = "tx.version";
    NullaryOperator["LOCKTIME"] = "tx.locktime";
})(NullaryOperator = exports.NullaryOperator || (exports.NullaryOperator = {}));
var UnaryOperator;
(function (UnaryOperator) {
    UnaryOperator["NOT"] = "!";
    UnaryOperator["NEGATE"] = "-";
    UnaryOperator["SIZE"] = ".length";
    UnaryOperator["REVERSE"] = ".reverse()";
    UnaryOperator["INPUT_VALUE"] = "tx.inputs[i].value";
    UnaryOperator["INPUT_LOCKING_BYTECODE"] = "tx.inputs[i].lockingBytecode";
    UnaryOperator["INPUT_OUTPOINT_HASH"] = "tx.inputs[i].outpointTransactionHash";
    UnaryOperator["INPUT_OUTPOINT_INDEX"] = "tx.inputs[i].outpointIndex";
    UnaryOperator["INPUT_UNLOCKING_BYTECODE"] = "tx.inputs[i].unlockingBytecode";
    UnaryOperator["INPUT_SEQUENCE_NUMBER"] = "tx.inputs[i].sequenceNumber";
    UnaryOperator["OUTPUT_VALUE"] = "tx.outputs[i].value";
    UnaryOperator["OUTPUT_LOCKING_BYTECODE"] = "tx.outputs[i].lockingBytecode";
})(UnaryOperator = exports.UnaryOperator || (exports.UnaryOperator = {}));
var BinaryOperator;
(function (BinaryOperator) {
    BinaryOperator["MUL"] = "*";
    BinaryOperator["DIV"] = "/";
    BinaryOperator["MOD"] = "%";
    BinaryOperator["PLUS"] = "+";
    BinaryOperator["MINUS"] = "-";
    BinaryOperator["LT"] = "<";
    BinaryOperator["LE"] = "<=";
    BinaryOperator["GT"] = ">";
    BinaryOperator["GE"] = ">=";
    BinaryOperator["EQ"] = "==";
    BinaryOperator["NE"] = "!=";
    BinaryOperator["BIT_AND"] = "&";
    BinaryOperator["BIT_XOR"] = "^";
    BinaryOperator["BIT_OR"] = "|";
    BinaryOperator["AND"] = "&&";
    BinaryOperator["OR"] = "||";
    BinaryOperator["SPLIT"] = ".split";
})(BinaryOperator = exports.BinaryOperator || (exports.BinaryOperator = {}));
//# sourceMappingURL=Operator.js.map