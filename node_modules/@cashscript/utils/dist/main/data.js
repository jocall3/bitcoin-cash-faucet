"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.placeholder = exports.decodeString = exports.encodeString = exports.decodeInt = exports.encodeInt = exports.decodeBool = exports.encodeBool = void 0;
const libauth_1 = require("@bitauth/libauth");
function encodeBool(bool) {
    return bool ? encodeInt(1) : encodeInt(0);
}
exports.encodeBool = encodeBool;
function decodeBool(encodedBool) {
    // Any encoding of 0 is false, else true
    for (let i = 0; i < encodedBool.byteLength; i += 1) {
        if (encodedBool[i] !== 0) {
            // Can be negative zero
            if (i === encodedBool.byteLength - 1 && encodedBool[i] === 0x80)
                return false;
            return true;
        }
    }
    return false;
}
exports.decodeBool = decodeBool;
function encodeInt(int) {
    return (0, libauth_1.bigIntToScriptNumber)(BigInt(int));
}
exports.encodeInt = encodeInt;
function decodeInt(encodedInt, maxLength = 8) {
    const options = { maximumScriptNumberByteLength: maxLength };
    const result = (0, libauth_1.parseBytesAsScriptNumber)(encodedInt, options);
    if ((0, libauth_1.isScriptNumberError)(result)) {
        throw new Error(result);
    }
    return Number(result);
}
exports.decodeInt = decodeInt;
function encodeString(str) {
    return (0, libauth_1.utf8ToBin)(str);
}
exports.encodeString = encodeString;
function decodeString(encodedString) {
    return (0, libauth_1.binToUtf8)(encodedString);
}
exports.decodeString = decodeString;
function placeholder(size) {
    return new Uint8Array(size).fill(0);
}
exports.placeholder = placeholder;
//# sourceMappingURL=data.js.map