import { OpcodesBCH } from '@bitauth/libauth';
export declare const Op: typeof OpcodesBCH;
export declare type Op = number;
export declare type OpOrData = Op | Uint8Array;
export declare type Script = OpOrData[];
export declare enum IntrospectionOp {
    OP_INPUTINDEX = 192,
    OP_ACTIVEBYTECODE = 193,
    OP_TXVERSION = 194,
    OP_TXINPUTCOUNT = 195,
    OP_TXOUTPUTCOUNT = 196,
    OP_TXLOCKTIME = 197,
    OP_UTXOVALUE = 198,
    OP_UTXOBYTECODE = 199,
    OP_OUTPOINTTXHASH = 200,
    OP_OUTPOINTINDEX = 201,
    OP_INPUTBYTECODE = 202,
    OP_INPUTSEQUENCENUMBER = 203,
    OP_OUTPUTVALUE = 204,
    OP_OUTPUTBYTECODE = 205
}
export declare const introspectionOpMapping: any;
export declare const reverseIntrospectionOpMapping: any;
export declare function scriptToAsm(script: Script): string;
export declare function asmToScript(asm: string): Script;
export declare function scriptToBytecode(script: Script): Uint8Array;
export declare function bytecodeToScript(bytecode: Uint8Array): Script;
export declare function asmToBytecode(asm: string): Uint8Array;
export declare function bytecodeToAsm(bytecode: Uint8Array): string;
export declare function countOpcodes(script: Script): number;
export declare function calculateBytesize(script: Script): number;
export declare function encodeNullDataScript(chunks: OpOrData[]): Uint8Array;
/**
 * When cutting out the tx.bytecode preimage variable, the compiler does not know
 * the size of the final redeem scrip yet, because the constructor parameters still
 * need to get added. Because of this it does not know whether the VarInt is 1 or 3
 * bytes. During compilation, an OP_NOP is added at the spot where the bytecode is
 * cut out. This function replaces that OP_NOP and adds either 1 or 3 to the cut to
 * additionally cut off the VarInt.
 *
 * @param script incomplete redeem script
 * @returns completed redeem script
 */
export declare function replaceBytecodeNop(script: Script): Script;
export declare function generateRedeemScript(baseScript: Script, encodedArgs: Script): Script;
export declare function optimiseBytecode(script: Script, runs?: number): Script;
